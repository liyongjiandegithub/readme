#gcc compile option
#link pthread lib to use pthread_mutex_* from pthread instead of libc.so, the function in libc.so do nothing.
gcc -o a.out -lpthread source.c

# ldd prints the shared libraries required by each program or shared library specified on the command line.
ldd a.out

#Or use objdump as a safe method to ...
objdump -p a.out |grep NEEDED

#look up symbol in shared library libc.so
readelf -s /lib64/libc.so.6 |grep pthread_mutex

############GDB#################################
#build binary with -g option as current version;
gcc -g ....
#Usage: objcopy [option(s)] in-file [out-file]
# Copies a binary file, possibly transforming it in the process
# The options are:
#  -g --strip-debug                 Remove all debugging symbols & sections
#     --only-keep-debug             Strip everything but the debug information
#     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>
#

#Usage: strip <option(s)> in-file(s)
# Removes symbols and sections from files
# The options are:
#   -g -S -d --strip-debug           Remove all debugging symbols & sections
#

#Produce the separated executable / debugging information file pairs using the following commands:
objcopy --only-keep-debug foo foo.debug

#Do not copy debugging symbols or sections from the source file.
objcopy --strip-debug foo
#or
strip -g foo

#The debug link method needs the following additional command to also leave behind a debug link in foo:
objcopy --add-gnu-debuglink=foo.debug foo


#Start GDB with PID
gdb PID
gdb -p ***
#or attach PID after start
(gdb) attach PID
#Add symbol file 
(gdb) symbol-file Server.symbol
